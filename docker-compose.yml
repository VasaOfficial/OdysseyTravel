version: '3.8'
services:

  web:
    depends_on:
      - api
    build:
      context: ./client
    ports:
      - "3000:3000"
    container_name: odyssey-frontend
    networks:
      - public
    # url of the backend
    environment:
      NEXT_API_URL: http://localhost:8000
    # for docker compose watch mode  
    develop:
      watch:
        - path: ./client/package.json
          action: rebuild
        - path: ./client/next.config.js
          action: rebuild
        - path: ./client/package-lock.json
          action: rebuild
        - path: ./client
          target: /app
          action: sync

  api: 
    depends_on: 
      - db
    build: ./server
    ports: 
      - 8000:8000
    environment: 
      DB_URL: lol
    networks:
      - public
      - private
    develop:
      watch:
        - path: ./server/package.json
          action: rebuild
        - path: ./server/package-lock.json
          action: rebuild
        - path: ./server
          target: /app
          action: sync

  db:
    # specify the image to use for the db service from docker hub. If we have a custom image, we can specify that in this format
    # In the above two services, we're using the build context to build the image for the service from the Dockerfile so we specify the image as "build: ./frontend" or "build: ./backend".
    # but for the db service, we're using the image from docker hub so we specify the image as "image: mongo:latest"
    # you can find the image name and tag for mongodb from docker hub here: https://hub.docker.com/_/mongo
    image: mongo:latest
    networks:
      - private

    # specify the ports to expose for the db service
    # generally, we do this in api service using mongodb atlas. But for demo purposes, we're using a local mongodb instance
    # usually, mongodb runs on port 27017. So we're exposing the port 27017 on the host machine and mapping it to the port 27017 inside the container
    ports:
      - 27017:27017

    # specify the volumes to mount for the db service
    # we're mounting the volume named "anime" inside the container at /data/db directory
    # this is done so that the data inside the mongodb container is persisted even if the container is stopped
    volumes:
      - db-data:/data/db
networks:
  public:
  private:
# define the volumes to be used by the services
volumes:
  db-data:

# to run this composer: docker compose up and also open another termial and enter docker compose watch